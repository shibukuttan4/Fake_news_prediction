# -*- coding: utf-8 -*-
"""Fake news prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-CIjz7EL9nTNNwLtxFqjpDpmXpaInYO

1. id: unique id for a news article
2. title:The title of a news article
3. author:author of the news article
4. text: the Text of the article;could be incomplete
5. Label: a Label that marks whether the news article is real or fake:

1: Fake news

0: Real news
"""

#importing dependencies
import numpy as np
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# printing the stopwords in English
print(stopwords.words('english'))

"""Data Pre-processing"""

# loading the dataset to a pandas Dataframe
news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

# print the first 5 rows of the dataframe
news_dataset.head()

# Counting the number of missing values in the dataset
news_dataset.isnull().sum()

# replacing the null values with empty string
news_dataset = news_dataset.fillna('')

news_dataset.isnull().sum()

# merging the author name and news title
news_dataset['content'] = news_dataset['author'] + ' ' + news_dataset['title']

print(news_dataset['content'])

# separating the data and label
X= news_dataset.drop(columns='label',axis=1)
Y= news_dataset['label']

print(X)
print(Y)

"""Stemming:

Stemming is the process of reducing a word to its Root word

example:
actor,actress,acting -->act
"""

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

# serparating the data and label
X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Splitting the dataset to training and test data"""

X_train ,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,stratify=Y,random_state=2)

"""Training the Model: Logistic Regression

Y=1/1+e^-Z

Z=w.X+b

X-->input features
Y-->Prediction Probability
w-->weights
b-->biases


"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Evaluation

Accuracy Score
"""

# Accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy Score of the training data :',training_data_accuracy)

# Accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy Score of the test data :',test_data_accuracy)

"""Predictive System"""

X_new = X_test[0]

prediction = model.predict(X_new)
print(prediction)

if(prediction[0]==0):
  print("The news is Real")
else:
  print("The news is Fake")

print(Y_test[0])

